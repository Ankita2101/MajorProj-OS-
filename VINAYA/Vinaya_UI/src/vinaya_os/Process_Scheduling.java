/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vinaya_os;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

/**
 *
 * @author Ankita Singh
 */
public class Process_Scheduling extends javax.swing.JFrame {
    static int n,i,tq,sum=0;
    static int CPUBurstTime[],arrivalTime[],priority[];
    DefaultTableModel model ;
    static int p[],wt[],ta[],c[],a[];
    static int k,j,temp;
    static double avgwt=0.0,avgta=0.0;
    static int minimumArrivalTime,sumCPUBurstTime;
    static int lengthOfEachBlock;
    static final int SCREEN_WIDTH=1500,SCREEN_HEIGHT=900;
    static final int rectangleUpperPadding=100,rectangleHeight=100;
    static Process_Scheduling obj;
    
    
    public Process_Scheduling() {
        initComponents();
        model = new DefaultTableModel();
        jTable1.setModel(model);
        model.addColumn("Process Num");
        model.addColumn("Priority");
        model.addColumn("Arrival Time");
        model.addColumn("Burst Time");
        model.addColumn("Turn Around Time");model.addColumn("Waiting Time");model.addColumn("Completion Time");
        model.addColumn("Avg. Turn Around Time");model.addColumn("Avg. Waiting Time");
        jButton8.setEnabled(false);
        this.obj=this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        Minimize = new javax.swing.JLabel();
        Restore = new javax.swing.JLabel();
        Close = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        Number_Panel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        num = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        Details_Panel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        prio = new javax.swing.JTextField();
        processnum = new javax.swing.JTextField();
        arrival = new javax.swing.JTextField();
        burst = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        TQ_Panel = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        View_Panel = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        Schedule_Panel = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        Detaile_Panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(243, 243, 243));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Minimize.setBackground(new java.awt.Color(255, 255, 255));
        Minimize.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Minimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_Minimize_Window_32px.png"))); // NOI18N
        Minimize.setOpaque(true);
        Minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MinimizeMouseClicked(evt);
            }
        });
        jPanel2.add(Minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 0, 40, 40));

        Restore.setBackground(new java.awt.Color(255, 255, 255));
        Restore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Restore.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_Restore_Window_32px.png"))); // NOI18N
        Restore.setOpaque(true);
        Restore.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RestoreMouseClicked(evt);
            }
        });
        jPanel2.add(Restore, new org.netbeans.lib.awtextra.AbsoluteConstraints(1390, 0, 40, 40));

        Close.setBackground(new java.awt.Color(255, 255, 255));
        Close.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_Delete_32px.png"))); // NOI18N
        Close.setOpaque(true);
        Close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CloseMouseClicked(evt);
            }
        });
        jPanel2.add(Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(1445, 0, 40, 40));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1500, 40));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Number_Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI Semilight", 0, 30)); // NOI18N
        jLabel2.setText("of Processes : ");
        jLabel2.setOpaque(true);
        Number_Panel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 240, 50));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI Semilight", 0, 30)); // NOI18N
        jLabel3.setText("Enter the number");
        jLabel3.setOpaque(true);
        Number_Panel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 240, 50));

        num.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        Number_Panel.add(num, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 80, 120, 50));

        jButton7.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jButton7.setText("Set");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        Number_Panel.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 79, 110, 50));

        jPanel1.add(Number_Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 560, 160));

        Details_Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Segoe UI Semilight", 0, 30)); // NOI18N
        jLabel4.setText("Process Number");
        jLabel4.setOpaque(true);
        Details_Panel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 240, 50));

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Segoe UI Semilight", 0, 30)); // NOI18N
        jLabel5.setText("Arrival Time");
        jLabel5.setOpaque(true);
        Details_Panel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 240, 50));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Segoe UI Semilight", 0, 30)); // NOI18N
        jLabel6.setText("Burst Time");
        jLabel6.setOpaque(true);
        Details_Panel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 240, 50));

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Segoe UI Semilight", 0, 30)); // NOI18N
        jLabel7.setText("Priority");
        jLabel7.setOpaque(true);
        Details_Panel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, 240, 50));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Segoe UI Semilight", 0, 30)); // NOI18N
        jLabel8.setText("Process Details :");
        jLabel8.setOpaque(true);
        Details_Panel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 240, 50));

        prio.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        Details_Panel.add(prio, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 300, 250, 50));

        processnum.setEditable(false);
        processnum.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        Details_Panel.add(processnum, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 90, 250, 50));

        arrival.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        Details_Panel.add(arrival, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 160, 250, 50));

        burst.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        Details_Panel.add(burst, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 230, 250, 50));

        jButton8.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jButton8.setText("Set");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        Details_Panel.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 410, 130, 50));

        jPanel1.add(Details_Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 560, 480));

        TQ_Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jSlider1.setMajorTickSpacing(1);
        jSlider1.setMaximum(10);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);
        jSlider1.setValue(0);
        TQ_Panel.add(jSlider1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 490, 70));

        jLabel1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jLabel1.setText("Time Quantum");
        TQ_Panel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 180, 30));

        jButton4.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jButton4.setText("Set");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        TQ_Panel.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 20, 110, -1));

        jPanel1.add(TQ_Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 640, 560, 160));

        View_Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jRadioButton1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jRadioButton1.setText("Gantt Chart View");
        jRadioButton1.setEnabled(false);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        View_Panel.add(jRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, -1, -1));

        jRadioButton2.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jRadioButton2.setText("Detailed View");
        jRadioButton2.setEnabled(false);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        View_Panel.add(jRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 20, -1, -1));

        jPanel1.add(View_Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 80, 930, 80));

        Schedule_Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jCheckBox1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jCheckBox1.setText("FCFS");
        jCheckBox1.setEnabled(false);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        Schedule_Panel.add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, -1, -1));

        jCheckBox2.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jCheckBox2.setText("SJF");
        jCheckBox2.setEnabled(false);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        Schedule_Panel.add(jCheckBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 20, -1, -1));

        jCheckBox3.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jCheckBox3.setText("RR");
        jCheckBox3.setEnabled(false);
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        Schedule_Panel.add(jCheckBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 20, -1, -1));

        jCheckBox4.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jCheckBox4.setText("PRIO");
        jCheckBox4.setEnabled(false);
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });
        Schedule_Panel.add(jCheckBox4, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 20, -1, -1));

        jPanel1.add(Schedule_Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 0, 930, 80));

        Detaile_Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Process Num", "Priority", "Arrival Time", "Burst Time"
            }
        ));
        jTable1.setCellSelectionEnabled(true);
        jTable1.setEnabled(false);
        jTable1.setRowHeight(48);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        Detaile_Panel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 890, 600));

        jPanel1.add(Detaile_Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 160, 930, 640));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 1500, 800));

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jButton1.setText("Simulate");
        jButton1.setEnabled(false);
        jPanel3.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1360, 10, -1, -1));

        jButton2.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jButton2.setText("Reset");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 10, 120, -1));

        jButton3.setFont(new java.awt.Font("Segoe UI Semilight", 0, 24)); // NOI18N
        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 120, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 840, 1500, 60));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void MinimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MinimizeMouseClicked
        // TODO add your handling code here:
        this.setState(Frame.ICONIFIED);
    }//GEN-LAST:event_MinimizeMouseClicked

    private void RestoreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RestoreMouseClicked
        // TODO add your handling code here:
        this.setSize(1500, 900);
        this.setLocationRelativeTo(null);
    }//GEN-LAST:event_RestoreMouseClicked

    private void CloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CloseMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_CloseMouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        try{
            n=Integer.parseInt(num.getText());
            CPUBurstTime=new int[n];
            arrivalTime=new int[n];
            priority=new int[n];
            wt= new int[n];
            ta= new int[n];
            p= new int[n];
            c=new int[n];
            i=0;
            processnum.setText("P0");
            jButton8.setEnabled(true);
            jButton7.setEnabled(false);
        }
        catch(NumberFormatException ex){
            JOptionPane.showMessageDialog (null, "Error in number format: Reenter the number");
            num.setText("");
        }        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        try{
            if (!arrival.getText().equals("") && !burst.getText().equals("") && !prio.getText().equals("") )
            {
            if(i<=n-1)
            {
                p[i]=i;
                CPUBurstTime[i]=Integer.parseInt(burst.getText());
                arrivalTime[i]=Integer.parseInt(arrival.getText());
                priority[i]=Integer.parseInt(prio.getText());
                model.addRow(new Object[]{processnum.getText(), prio.getText(), arrival.getText(), burst.getText()});
                i=i+1;
                if(i<=n-1)
                {
                    processnum.setText("P"+i);
                    burst.setText("");
                    arrival.setText("");
                    prio.setText("");
                }
                else
                {
                    processnum.setEnabled(false);
                    burst.setEnabled(false);
                    arrival.setEnabled(false);
                    prio.setEnabled(false);
                    jButton8.setEnabled(false);
                    jCheckBox1.setEnabled(true);
                    jCheckBox2.setEnabled(true);
                    jCheckBox3.setEnabled(true);
                    jCheckBox4.setEnabled(true);
                }
            }
        }}
        catch(NumberFormatException ex){
                JOptionPane.showMessageDialog (null, "Error in number format: Reenter the number");
                processnum.setText("P"+i);
                    burst.setText("");
                    arrival.setText("");
                    prio.setText("");
                }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        tq=jSlider1.getValue();
        jButton4.setEnabled(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox1.isSelected())
        {
            avgwt=0.0;
            avgta=0.0;
            FCFS();
            jCheckBox1.setEnabled(false);
        }
        if(jCheckBox2.isSelected())
        {
            avgwt=0.0;
            avgta=0.0;
            SJF();
            jCheckBox2.setEnabled(false);
        }
        if(jCheckBox3.isSelected())
        {
            avgwt=0.0;
            avgta=0.0;
            RR();
            jCheckBox3.setEnabled(false);
        }
        if(jCheckBox4.isSelected())
        {
            avgwt=0.0;
            avgta=0.0;
            PRIORITY();
            jCheckBox4.setEnabled(false);
        }

    }//GEN-LAST:event_jRadioButton2ActionPerformed

    public void FCFS(){
        for (i = 0; i < n-1; i++)
            for (j = 0; j < n-i-1; j++)
                if (arrivalTime[j] > arrivalTime[j+1])
                {
                    temp = arrivalTime[j];
                    arrivalTime[j] = arrivalTime[j+1];
                    arrivalTime[j+1] = temp;
                    temp = CPUBurstTime[j];
                    CPUBurstTime[j] = CPUBurstTime[j+1];
                    CPUBurstTime[j+1] = temp;
                    temp = p[j];
                    p[j] = p[j+1];
                    p[j+1] = temp;
                    
                }
        wt[0]=0;
        ta[0]=CPUBurstTime[0];
        c[0]=CPUBurstTime[0]+arrivalTime[0];
        model.setValueAt(ta[0],0, 4);
        model.setValueAt(wt[0],0, 5);
        model.setValueAt(c[0], 0, 6);
        
        for(i=1;i<n;i++)
        {
            c[i]=c[i-1]+CPUBurstTime[i];
            ta[i]=c[i]-arrivalTime[i];
            wt[i]=ta[i]-CPUBurstTime[i];
            model.setValueAt(ta[i],i, 4);
            model.setValueAt(wt[i],i, 5);
            model.setValueAt(c[i], i, 6);
        }
        
        for(i = 0 ; i < n ; i++)
        {
            avgwt = avgwt + wt[i];
            avgta = avgta + ta[i];
        }
        model.setValueAt(avgwt/n,0, 8);
        model.setValueAt(avgta/n,0, 7);
    }
    
    public void SJF()
    {
        for (i = 0; i < n-1; i++)
            for (j = 0; j < n-i-1; j++)
                if (arrivalTime[j] > arrivalTime[j+1])
                {
                    temp = arrivalTime[j];
                    arrivalTime[j] = arrivalTime[j+1];
                    arrivalTime[j+1] = temp;
                    temp = CPUBurstTime[j];
                    CPUBurstTime[j] = CPUBurstTime[j+1];
                    CPUBurstTime[j+1] = temp;
                    temp = p[j];
                    p[j] = p[j+1];
                    p[j+1] = temp;
                    
                }
        
        for (i = 0; i < n-1; i++)
            for (j = 0; j < n-i-1; j++)
                if ((arrivalTime[j] >= arrivalTime[j+1])&&(CPUBurstTime[j]>=CPUBurstTime[j+1]))
                {
                    temp = arrivalTime[j];
                    arrivalTime[j] = arrivalTime[j+1];
                    arrivalTime[j+1] = temp;
                    temp = CPUBurstTime[j];
                    CPUBurstTime[j] = CPUBurstTime[j+1];
                    CPUBurstTime[j+1] = temp;
                    temp = p[j];
                    p[j] = p[j+1];
                    p[j+1] = temp;
                    
                }
        
        wt[0]=0;
        ta[0]=CPUBurstTime[0];
        c[0]=CPUBurstTime[0]+arrivalTime[0];
        model.setValueAt(ta[0],0, 4);
        model.setValueAt(wt[0],0, 5);
        model.setValueAt(c[0], 0, 6);
        for(k=1;k<=n-1;k++)
        {
            if(arrivalTime[k]<=c[k-1])
            {
                for (i = 1; i <= n-1; i++)
                    for (j = 1; j <= n-i-1; j++)
                        if((CPUBurstTime[j]>CPUBurstTime[j+1])&&(arrivalTime[j+1])<=c[j-1])
                        {
                        temp = arrivalTime[j];
                        arrivalTime[j] = arrivalTime[j+1];
                        arrivalTime[j+1] = temp;
                        temp = CPUBurstTime[j];
                        CPUBurstTime[j] = CPUBurstTime[j+1];
                        CPUBurstTime[j+1] = temp;
                        temp = p[j];
                        p[j] = p[j+1];
                        p[j+1] = temp;
                       }
            }
            c[k]=c[k-1]+CPUBurstTime[k];
        }
        for(i=1;i<n;i++)
        {
            c[i]=c[i-1]+CPUBurstTime[i];
            ta[i]=c[i]-arrivalTime[i];
            wt[i]=ta[i]-CPUBurstTime[i];
            model.setValueAt(ta[i],i, 4);
            model.setValueAt(wt[i],i, 5);
            model.setValueAt(c[i], i, 6);
        }
        
        for(i = 0 ; i < n ; i++)
        {
            avgwt = avgwt + wt[i];
            avgta = avgta + ta[i];
        }
        model.setValueAt(avgwt/n,0, 8);
        model.setValueAt(avgta/n,0, 7);
        
    }
    
    public void RR()
    {
        a=new int[n];
        for(i=0;i<n;i++)
            a[i]=CPUBurstTime[i];
        
        for(i=0;i<n;i++)
            wt[i]=0; 
        do
        {
            for(i=0;i<n;i++)
            {    
                if(a[i]>tq)
                {
                    a[i]-=tq; 
                    for(j=0;j<n;j++)
                    {
                        if((j!=i)&&(a[j]!=0))
                        wt[j]+=tq;
                    }
                }
                else
                {
                    for(j=0;j<n;j++)
                    {
                        if((j!=i)&&(a[j]!=0))
                        wt[j]+=a[i];
                    }
                    a[i]=0;
                }
            }
            sum=0;
            for(k=0;k<n;k++)
            sum=sum+a[k];
        }while(sum!=0);
        
        for(i=0;i<n;i++)
        {
            ta[i]=wt[i]+a[i];
            model.setValueAt(ta[i],i, 4);
            model.setValueAt(wt[i],i, 5);
        }
        for(i = 0 ; i < n ; i++)
        {
            avgwt = avgwt + wt[i];
            avgta = avgta + ta[i];
        }
        model.setValueAt(avgwt/n,0, 8);
        model.setValueAt(avgta/n,0, 7);
    }
    
    public void PRIORITY()
    {
        for (i = 0; i < n-1; i++)
            for (j = 0; j < n-i-1; j++)
                if (priority[j] > priority[j+1])
                {
                    temp = priority[j];
                    priority[j] = priority[j+1];
                    priority[j+1] = temp;
                    temp = CPUBurstTime[j];
                    CPUBurstTime[j] = CPUBurstTime[j+1];
                    CPUBurstTime[j+1] = temp;
                    temp = p[j];
                    p[j] = p[j+1];
                    p[j+1] = temp;
                    
                }
        wt[0]=0;
        ta[0]=CPUBurstTime[0];
        c[0]=CPUBurstTime[0];
        model.setValueAt(ta[0],0, 4);
        model.setValueAt(wt[0],0, 5);
        model.setValueAt(c[0], 0, 6);
        
        for(i=1;i<n;i++)
        {
            c[i]=c[i-1]+CPUBurstTime[i];
            ta[i]=c[i];
            wt[i]=ta[i]-CPUBurstTime[i];
            model.setValueAt(ta[i],i, 4);
            model.setValueAt(wt[i],i, 5);
            model.setValueAt(c[i], i, 6);
        }
        
        for(i = 0 ; i < n ; i++)
        {
            avgwt = avgwt + wt[i];
            avgta = avgta + ta[i];
        }
        model.setValueAt(avgwt/n,0, 8);
        model.setValueAt(avgta/n,0, 7);
    }
    
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox1.isSelected())
        {
            jCheckBox2.setEnabled(false);
            jCheckBox3.setEnabled(false);
            jCheckBox4.setEnabled(false);
            jRadioButton1.setEnabled(true);
            jRadioButton2.setEnabled(true);
        }
        else
        {
            jCheckBox2.setEnabled(true);
            jCheckBox3.setEnabled(true);
            jCheckBox4.setEnabled(true);
            jRadioButton1.setEnabled(false);
            jRadioButton2.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox2.isSelected())
        {
            jCheckBox1.setEnabled(false);
            jCheckBox3.setEnabled(false);
            jCheckBox4.setEnabled(false);
            jRadioButton1.setEnabled(true);
            jRadioButton2.setEnabled(true);
        }
        else
        {
            jCheckBox1.setEnabled(true);
            jCheckBox3.setEnabled(true);
            jCheckBox4.setEnabled(true);
            jRadioButton1.setEnabled(false);
            jRadioButton2.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox3.isSelected())
        {
            jCheckBox1.setEnabled(false);
            jCheckBox2.setEnabled(false);
            jCheckBox4.setEnabled(false);
            jRadioButton1.setEnabled(true);
            jRadioButton2.setEnabled(true);
        }
        else
        {
            jCheckBox1.setEnabled(true);
            jCheckBox2.setEnabled(true);
            jCheckBox4.setEnabled(true);
            jRadioButton1.setEnabled(false);
            jRadioButton2.setEnabled(false);

        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox4.isSelected())
        {
            jCheckBox1.setEnabled(false);
            jCheckBox2.setEnabled(false);
            jCheckBox3.setEnabled(false);
            jRadioButton1.setEnabled(true);
            jRadioButton2.setEnabled(true);
        }
        else
        {
            jCheckBox1.setEnabled(true);
            jCheckBox2.setEnabled(true);
            jCheckBox3.setEnabled(true);
            jRadioButton1.setEnabled(false);
            jRadioButton2.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        model.setRowCount(0);
        num.setText("");
        processnum.setText("");
        arrival.setText("");
        burst.setText("");
        prio.setText("");
        processnum.setEnabled(true);
        arrival.setEnabled(true);
        burst.setEnabled(true);
        prio.setEnabled(true);
        jSlider1.setValue(0);
        jCheckBox1.setSelected(false);
        jCheckBox2.setSelected(false);
        jCheckBox3.setSelected(false);
        jCheckBox4.setSelected(false);
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(false);
        jRadioButton1.setEnabled(false);
        jRadioButton2.setEnabled(false);
        jButton7.setEnabled(true);
        jButton4.setEnabled(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Vinaya_Home ob=new Vinaya_Home();
        ob.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        // TODO add your handling code here:
        if(jCheckBox1.isSelected())
        {
            FCFS_Gantt();
            jCheckBox1.setEnabled(false);
        }
        if(jCheckBox2.isSelected())
        {
            SJF_Gantt();
            jCheckBox2.setEnabled(false);
        }
        if(jCheckBox3.isSelected())
        {
            sumCPUBurstTime=0;
            RR_Gantt();
            jCheckBox3.setEnabled(false);
        }
        if(jCheckBox4.isSelected())
        {
            PRIORITY_Gantt();
            jCheckBox4.setEnabled(false);
        }
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    public void FCFS_Gantt()
    {
        sumCPUBurstTime=0;
        for(int k=0;k<n;k++)
        {
            sumCPUBurstTime+=CPUBurstTime[k];
        }
        lengthOfEachBlock=SCREEN_WIDTH/sumCPUBurstTime;
        minimumArrivalTime=Integer.MAX_VALUE;
        for(int k=0;k<n;k++)
        {
            if(minimumArrivalTime>arrivalTime[k])
                minimumArrivalTime=arrivalTime[k];
        }
        new FrameForFCFS(obj);
    }
    
    public void SJF_Gantt()
    {
        sumCPUBurstTime=0;
        for(int k=0;k<n;k++)
        {
            sumCPUBurstTime+=CPUBurstTime[k];
        }
        lengthOfEachBlock=SCREEN_WIDTH/sumCPUBurstTime;
        minimumArrivalTime=Integer.MAX_VALUE;
        for(int k=0;k<n;k++)
        {
            if(minimumArrivalTime>arrivalTime[k])
                minimumArrivalTime=arrivalTime[k];
        }
        new FrameForSJF(obj);
    }
    
    public void RR_Gantt()
    {
        
        for(int k=0;k<n;k++)
        {
            sumCPUBurstTime+=CPUBurstTime[k];
        }
        
        lengthOfEachBlock=SCREEN_WIDTH/sumCPUBurstTime;
        new FrameForRR(obj);
    }
    
    public void PRIORITY_Gantt()
    {
        sumCPUBurstTime=0;
        for(int i=0;i<n;i++)
        {
            sumCPUBurstTime+=CPUBurstTime[i];
        }
        lengthOfEachBlock=SCREEN_WIDTH/sumCPUBurstTime;
        new FrameForPriority(obj);
                
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Process_Scheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Process_Scheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Process_Scheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Process_Scheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Process_Scheduling().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Close;
    private javax.swing.JPanel Detaile_Panel;
    private javax.swing.JPanel Details_Panel;
    private javax.swing.JLabel Minimize;
    private javax.swing.JPanel Number_Panel;
    private javax.swing.JLabel Restore;
    private javax.swing.JPanel Schedule_Panel;
    private javax.swing.JPanel TQ_Panel;
    private javax.swing.JPanel View_Panel;
    private javax.swing.JTextField arrival;
    private javax.swing.JTextField burst;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private static javax.swing.JTable jTable1;
    private javax.swing.JTextField num;
    private javax.swing.JTextField prio;
    private javax.swing.JTextField processnum;
    // End of variables declaration//GEN-END:variables
}
class FrameForFCFS extends JFrame
{
                int arrivalTime[];
                Process_Scheduling obj;
                FrameForFCFS(Process_Scheduling obj)
                {
                    super("FCFS");
                    this.obj=obj;
                    this.setResizable(false);
                    this.setVisible(true);
                    this.setSize(obj.SCREEN_WIDTH+100, obj.SCREEN_HEIGHT);
                    this.setLocationRelativeTo(null);
                    this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    arrivalTime=obj.arrivalTime.clone();
                }
                @Override
                public void paint(Graphics g2)
                {
                    super.paint(g2);
                    Graphics2D g = (Graphics2D) g2;
                    g.setStroke(new BasicStroke(10));
                    this.getContentPane().setBackground(Color.white); 
                    int currentTime=obj.minimumArrivalTime;
                    arrivalTime=obj.arrivalTime.clone();
                    int i,j,min,mini = 0;
                    int leftStart=50;
                    g=(Graphics2D) this.getContentPane().getGraphics();
                    g.drawString(""+obj.minimumArrivalTime,leftStart,obj.rectangleUpperPadding+obj.rectangleHeight+20);
                    for(j=0;j<obj.n;j++)
                    {
                        min=Integer.MAX_VALUE;
                        for(i=0;i<obj.n;i++)
                        {
                            if(min>arrivalTime[i])
                            {
                                min=arrivalTime[i];
                                mini=i;
                            }
                        }
                        arrivalTime[mini]=Integer.MAX_VALUE;
                       
                        g=(Graphics2D) this.getContentPane().getGraphics();
                        g.drawRect(leftStart,obj.rectangleUpperPadding,obj.lengthOfEachBlock*obj.CPUBurstTime[mini],obj.rectangleHeight);
                        g.drawString("P"+(mini+1),leftStart+5,obj.rectangleUpperPadding+50);
                        leftStart+=obj.lengthOfEachBlock*obj.CPUBurstTime[mini];
                       
                        currentTime+=obj.CPUBurstTime[mini];
                        g.drawString(""+currentTime,leftStart,obj.rectangleUpperPadding+obj.rectangleHeight+20);
                    }
                }
}

class FrameForSJF extends JFrame
{
                int CPUBurstTime[];
                Process_Scheduling obj;
                FrameForSJF(Process_Scheduling obj)
                {
                    super("Non preemptive SJF");
                    this.obj=obj;
                    this.setResizable(false);
                    this.setVisible(true);
                    this.setSize(obj.SCREEN_WIDTH+100, obj.SCREEN_HEIGHT);
                    this.setLocationRelativeTo(null);
                    this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    CPUBurstTime=obj.CPUBurstTime.clone();
                }
                @Override
                public void paint(Graphics g)
                {
                    super.paint(g);
                    this.getContentPane().setBackground(Color.white);
                    int currentTime=obj.minimumArrivalTime;     
                    CPUBurstTime=obj.CPUBurstTime.clone();
                    int i,j,min,mini = 0;
                    int leftStart=50;
                    g=this.getContentPane().getGraphics();
                    g.drawString(""+obj.minimumArrivalTime,leftStart,obj.rectangleUpperPadding+obj.rectangleHeight+20);
                    for(j=0;j<obj.n;j++)
                    {
                        min=Integer.MAX_VALUE;
                        for(i=0;i<obj.n;i++)
                        {
                            if(min>CPUBurstTime[i] && obj.arrivalTime[i]<=currentTime)
                            {
                                min=CPUBurstTime[i];
                                mini=i;
                            }
                        }
                        g=this.getContentPane().getGraphics();
                        g.drawRect(leftStart,obj.rectangleUpperPadding,obj.lengthOfEachBlock*obj.CPUBurstTime[mini],obj.rectangleHeight);
                        g.drawString("P"+(mini+1),leftStart+5,obj.rectangleUpperPadding+50);
                        leftStart+=obj.lengthOfEachBlock*obj.CPUBurstTime[mini];
                        currentTime+=obj.CPUBurstTime[mini];
                        g.drawString(""+currentTime,leftStart,obj.rectangleUpperPadding+obj.rectangleHeight+20);    
                        CPUBurstTime[mini]=Integer.MAX_VALUE; 
                    }
                }
}

class FrameForRR extends JFrame
{
                Process_Scheduling obj;
                int CPUBurstTime[];
                FrameForRR(Process_Scheduling obj)
                {
                    super("Round Robin Scheduling");
                    this.obj=obj;
                    this.setResizable(false);
                    this.setVisible(true);
                    this.setSize(obj.SCREEN_WIDTH+100, obj.SCREEN_HEIGHT);
                    this.setLocationRelativeTo(null);
                    this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    repaint();
                }
                @Override
                public void paint(Graphics g)
                {
                    super.paint(g);
                    CPUBurstTime=obj.CPUBurstTime.clone();
                    this.getContentPane().setBackground(Color.white);
                    int currentTime=0;
                    int leftStart=50;
                    int processNumber=0;
                    g=this.getContentPane().getGraphics();
                    g.drawString(""+currentTime,leftStart,obj.rectangleUpperPadding+obj.rectangleHeight+20);
                    int temptime=0;
                    for(currentTime=0;currentTime<=obj.sumCPUBurstTime;currentTime++)
                    {
                        temptime++;
                        if(temptime>obj.tq || CPUBurstTime[processNumber]==0 || currentTime==obj.sumCPUBurstTime-1)
                        {
                                int blockLength=temptime-1<obj.tq?temptime-1:obj.tq;
                                g=this.getContentPane().getGraphics();
                                g.drawRect(leftStart,obj.rectangleUpperPadding,obj.lengthOfEachBlock*blockLength,obj.rectangleHeight);
                                g.drawString("P"+(processNumber+1),leftStart+5,obj.rectangleUpperPadding+50);
                                leftStart+=obj.lengthOfEachBlock*blockLength;
                                g.drawString(""+(currentTime),leftStart,obj.rectangleUpperPadding+obj.rectangleHeight+20);
                                temptime=1;
                                int counter=0;
                                do
                                {
                                    counter++;
                                    if(counter==obj.n+1)
                                        break;
                                    processNumber=(processNumber+1)%obj.n;     
                                }while(CPUBurstTime[processNumber]==0);
                        }
                        CPUBurstTime[processNumber]--;
                    }
                }
}
class FrameForPriority extends JFrame
{
                Process_Scheduling obj;
                int priority[];
                FrameForPriority(Process_Scheduling obj)
                {
                    super("Priority Scheduling");
                    this.obj=obj;
                    this.setResizable(false);
                    this.setVisible(true);
                    this.setSize(obj.SCREEN_WIDTH+100, obj.SCREEN_HEIGHT);
                    this.setLocationRelativeTo(null);
                    this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                    repaint();
                }
                @Override
                public void paint(Graphics g)
                {
                    super.paint(g);
                    priority=obj.priority.clone();
                    this.getContentPane().setBackground(Color.white);
                    int currentTime=0;
                    int leftStart=50;
                    int min,mini = 0;
                    g=this.getContentPane().getGraphics();
                    g.drawString(""+currentTime,leftStart,obj.rectangleUpperPadding+obj.rectangleHeight+20);  
                    for(int j=0;j<obj.n;j++)
                    {
                        min=Integer.MAX_VALUE;
                        for(int i=0;i<obj.n;i++)
                        {
                            if(min>priority[i])
                            {
                                min=priority[i];
                                mini=i;
                            }
                        }
                        priority[mini]=Integer.MAX_VALUE;
                        g=this.getContentPane().getGraphics();
                        g.drawRect(leftStart,obj.rectangleUpperPadding,obj.lengthOfEachBlock*obj.CPUBurstTime[mini],obj.rectangleHeight);
                        g.drawString("P"+(mini+1),leftStart+5,obj.rectangleUpperPadding+50);
                        leftStart+=obj.lengthOfEachBlock*obj.CPUBurstTime[mini];
                        currentTime+=obj.CPUBurstTime[mini];
                        g.drawString(""+currentTime,leftStart,obj.rectangleUpperPadding+obj.rectangleHeight+20);
                    }
                }
}